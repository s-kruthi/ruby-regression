<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">x-Indeed-Signature</stringProp>
            <stringProp name="Header.value">WOFVvxCPBm+WGjzXYhwkq1qyyVQ=</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1468822077000</longProp>
        <longProp name="ThreadGroup.end_time">1468822077000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get This Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">robert01.dev.elmodev.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/requisition/job/test-hmac-sig/45</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">indeed_tag</stringProp>
            <stringProp name="RegexExtractor.regex">(.+?)=</stringProp>
            <stringProp name="RegexExtractor.template">$0$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">indeed_id</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;appliedOnMillis&quot;: &quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">answer_value</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;value&quot;: (.+?)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post This Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;ID&quot;: &quot;ind_${indeed_id}&quot;,&#xd;
    &quot;locale&quot;: &quot;en_US&quot;,&#xd;
    &quot;appliedOnMillis&quot;: &quot;${indeed_id}&quot;,&#xd;
    &quot;job&quot;: {&#xd;
        &quot;jobId&quot;: &quot;TMS-robert01-Indeed-45&quot;,&#xd;
        &quot;jobTitle&quot;: &quot;Test Engineer&quot;,&#xd;
        &quot;jobCompany&quot;: &quot;Your Company&quot;,&#xd;
        &quot;jobLocation&quot;: &quot;New York, NY 10110&quot;,&#xd;
        &quot;jobUrl&quot;: &quot;http:\/\/www.yourcompany.com\/careers\/yourjob123.html&quot;,&#xd;
        &quot;jobMeta&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;applicant&quot;: {&#xd;
        &quot;fullName&quot;: &quot;Indeed${indeed_id} Test${indeed_id}&quot;,&#xd;
        &quot;email&quot;: &quot;submitappnindeedtest${indeed_id}@fromindeed.com&quot;,&#xd;
        &quot;phoneNumber&quot;: &quot;555-555-4321&quot;,&#xd;
        &quot;coverletter&quot;: &quot;coverletter - text&quot;,&#xd;
        &quot;resume&quot;: {&#xd;
            &quot;text&quot;: &quot;resume - text&quot;,&#xd;
            &quot;hrXml&quot;: &quot;resume-hr-xml&quot;,&#xd;
            &quot;html&quot;: &quot;resume - html&quot;,&#xd;
            &quot;json&quot;: {&#xd;
                &quot;firstName&quot;: &quot;John&quot;,&#xd;
                &quot;lastName&quot;: &quot;Doe&quot;,&#xd;
                &quot;headline&quot;: &quot;headline&quot;,&#xd;
                &quot;summary&quot;: &quot;summary&quot;,&#xd;
                &quot;publicProfileUrl&quot;: &quot;http:\/\/www.indeed.com\/r\/123456&quot;,&#xd;
                &quot;additionalInfo&quot;: &quot;me-additionalinfo&quot;,&#xd;
                &quot;phoneNumber&quot;: &quot;555-555-4321&quot;,&#xd;
                &quot;location&quot;: {&#xd;
                    &quot;city&quot;: &quot;Austin, TX&quot;&#xd;
                },&#xd;
                &quot;skills&quot;: &quot;HTML, JavaScript&quot;,&#xd;
                &quot;positions&quot;: {&#xd;
                    &quot;_total&quot;: 1,&#xd;
                    &quot;values&quot;: [&#xd;
                        {&#xd;
                            &quot;title&quot;: &quot;Product Manager&quot;,&#xd;
                            &quot;company&quot;: &quot;Indeed&quot;,&#xd;
                            &quot;location&quot;: &quot;Austin, TX&quot;,&#xd;
                            &quot;startDateMonth&quot;: &quot;09&quot;,&#xd;
                            &quot;startDateYear&quot;: &quot;2007&quot;,&#xd;
                            &quot;endDateMonth&quot;: &quot;-1&quot;,&#xd;
                            &quot;endDateYear&quot;: &quot;-1&quot;,&#xd;
                            &quot;endCurrent&quot;: true,&#xd;
                            &quot;description&quot;: &quot;I am the current product manager for Indeed Apply.&quot;&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;educations&quot;: {&#xd;
                    &quot;_total&quot;: 1,&#xd;
                    &quot;values&quot;: [&#xd;
                        {&#xd;
                            &quot;degree&quot;: &quot;B.A.&quot;,&#xd;
                            &quot;field&quot;: &quot;Computer Science&quot;,&#xd;
                            &quot;school&quot;: &quot;University of Texas, Austin&quot;,&#xd;
                            &quot;location&quot;: &quot;Austin, TX&quot;,&#xd;
                            &quot;startDate&quot;: &quot;2002&quot;,&#xd;
                            &quot;endDate&quot;: &quot;2006&quot;,&#xd;
                            &quot;endCurrent&quot;: false&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;links&quot;: {&#xd;
                    &quot;_total&quot;: 1,&#xd;
                    &quot;values&quot;: [&#xd;
                        {&#xd;
                            &quot;url&quot;: &quot;http:\/\/www.indeed.com&quot;&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;awards&quot;: {&#xd;
                    &quot;_total&quot;: 1,&#xd;
                    &quot;values&quot;: [&#xd;
                        {&#xd;
                            &quot;title&quot;: &quot;Best PM at Indeed&quot;,&#xd;
                            &quot;dateMonth&quot;: &quot;04&quot;,&#xd;
                            &quot;dateYear&quot;: &quot;2008&quot;,&#xd;
                            &quot;description&quot;: &quot;Best PM is voted on by Indeed employees and given to the PM with the most votes.&quot;&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;certifications&quot;: {&#xd;
                    &quot;_total&quot;: 1,&#xd;
                    &quot;values&quot;: [&#xd;
                        {&#xd;
                            &quot;title&quot;: &quot;cert-title&quot;,&#xd;
                            &quot;startDateMonth&quot;: &quot;02&quot;,&#xd;
                            &quot;startDateYear&quot;: &quot;2007&quot;,&#xd;
                            &quot;endDateMonth&quot;: &quot;02&quot;,&#xd;
                            &quot;endDateYear&quot;: &quot;2008&quot;,&#xd;
                            &quot;endCurrent&quot;: false,&#xd;
                            &quot;description&quot;: &quot;cert-description&quot;&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;associations&quot;: {&#xd;
                    &quot;_total&quot;: 1,&#xd;
                    &quot;values&quot;: [&#xd;
                        {&#xd;
                            &quot;title&quot;: &quot;group-title&quot;,&#xd;
                            &quot;startDateMonth&quot;: &quot;01&quot;,&#xd;
                            &quot;startDateYear&quot;: &quot;2009&quot;,&#xd;
                            &quot;endDateMonth&quot;: &quot;-1&quot;,&#xd;
                            &quot;endDateYear&quot;: &quot;-1&quot;,&#xd;
                            &quot;endCurrent&quot;: true,&#xd;
                            &quot;description&quot;: &quot;group-description&quot;&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;patents&quot;: {&#xd;
                    &quot;_total&quot;: 1,&#xd;
                    &quot;values&quot;: [&#xd;
                        {&#xd;
                            &quot;patentNumber&quot;: &quot;patent-number&quot;,&#xd;
                            &quot;title&quot;: &quot;patent-title&quot;,&#xd;
                            &quot;url&quot;: &quot;patent-url&quot;,&#xd;
                            &quot;dateMonth&quot;: &quot;02&quot;,&#xd;
                            &quot;dateYear&quot;: &quot;2009&quot;,&#xd;
                            &quot;description&quot;: &quot;patent-description&quot;&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;publications&quot;: {&#xd;
                    &quot;_total&quot;: 1,&#xd;
                    &quot;values&quot;: [&#xd;
                        {&#xd;
                            &quot;title&quot;: &quot;pub-title&quot;,&#xd;
                            &quot;url&quot;: &quot;pub-url&quot;,&#xd;
                            &quot;dateDay&quot;: &quot;14&quot;,&#xd;
                            &quot;dateMonth&quot;: &quot;10&quot;,&#xd;
                            &quot;dateYear&quot;: &quot;2004&quot;,&#xd;
                            &quot;description&quot;: &quot;pub-description&quot;&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                &quot;militaryServices&quot;: {&#xd;
                    &quot;_total&quot;: 1,&#xd;
                    &quot;values&quot;: [&#xd;
                        {&#xd;
                            &quot;serviceCountry&quot;: &quot;mil-country&quot;,&#xd;
                            &quot;branch&quot;: &quot;mil-branch&quot;,&#xd;
                            &quot;rank&quot;: &quot;mil-rank&quot;,&#xd;
                            &quot;startDateMonth&quot;: &quot;02&quot;,&#xd;
                            &quot;startDateYear&quot;: &quot;2003&quot;,&#xd;
                            &quot;endDateMonth&quot;: &quot;12&quot;,&#xd;
                            &quot;endDateYear&quot;: &quot;2008&quot;,&#xd;
                            &quot;endCurrent&quot;: false,&#xd;
                            &quot;commendations&quot;: &quot;mil-commendations&quot;,&#xd;
                            &quot;description&quot;: &quot;mil-description&quot;&#xd;
                        }&#xd;
                    ]&#xd;
                }&#xd;
            },&#xd;
            &quot;file&quot;: {&#xd;
                &quot;contentType&quot;: &quot;application\/octet-stream&quot;,&#xd;
                &quot;data&quot;: &quot;JVBERi0xLjQKJcOkw7zDtsOfCjIgMCBvYmoKPDwvTGVuZ3RoIDMgMCBSL0ZpbHRlci9GbGF0ZURlY29kZT4+CnN0cmVhbQp4nFWNPwuDQAzF93yKzIWzyendKRwBtTp0Ew46lG79sxXq0q\/fqMVaMuTll\/cSyhjf8ELS8mwxVBbHG5x2+PxSwvEBTQLnsxKDLTSQrrjvGdWe7udILIYjWcrFRipEtSO\/6iBGpRfjJl5uYfUXWVg9Dc3CWqX1z+7ooKjTPm97Jpn\/tmJCXBPM28xymy3ncklH6BIMMOAHHxk0MAplbmRzdHJlYW0KZW5kb2JqCgozIDAgb2JqCjE1NQplbmRvYmoKCjUgMCBvYmoKPDwvTGVuZ3RoIDYgMCBSL0ZpbHRlci9GbGF0ZURlY29kZS9MZW5ndGgxIDExOTI0Pj4Kc3RyZWFtCnic5XlreFPXlehe5+jlp45sWZYRko442AZsWcYyBBPAwm+wARnbVCIBS1jyI7EtIckQ8sKdhJSYECh5p5kJN2XyZdLcyXEgGZJmErdNpt98mUzSKZkmTWndafrl621o3JRm7qWxfNfe58gYStJv7r3\/7rbPOWuvvdba6332sVOJsSjJJeOEJ76+kXDct3xNDSHkXwiBgr59KXH9tqLrEZ4mhPu3\/vjAyOP\/cONFQjRnCNGfGRg+0H9\/5E+nCMkdJKRAGIyGI7WRn3sJcdyCMlYPIiKQPqDHuYzzpYMjqVse0tzvw\/k5nHcMx\/rC+5bd4ibEKeJ8xUj4lvgKzSYO5x04F0fDI1FHPdeG82FCcvbFY8lUhCydQ9KP6Ho8EY13PL7nTUIqNITwxxEH+ENHLoI6Oud4jVanN2Rl5+Tm5RsFU0Eh+f9qaI+SItKmXU+MJM7uVwz+OVJCHiNk7hM6u3xPd8xd+n+phUF5PEqeJmfIUfIB2aUutBA\/GSJjiFk4vkd+hFg6\/GQneZZMfInY58hZXFfoQuQYteSaw08eIafJD6\/YxU9GyG2oy4vkA1hJ\/hlTJUY+AwP5OnkTpX6GuC3XEsXl462fgf0LsB+Sb3FHyGaO5uVjdIXzcAJ5gzwBu1FyCu08Om\/xuj8T+g1yB967yCDZhzAb2vVf\/JRkzf0BrbqDbCZ\/RTaS4QUcr8KTfDbGr5s8iT79HsN5Mov6Nv4m7iWOm30AJ98kA3iFAW3njvIbv8RD\/+XB95A8WM6XkqxrrXK1xJi+xNXMXeSXkmzSMzeTwc21z\/2BD6dHNb2axdr1mre+ag\/dNzUjyE3mfp2+LR3RbtU+jdF6hhBf6w07g4Ge7q7tnf5tW7d0tG\/e1Nba0tzU2LDRV79h\/brr19atuW71qpXVnip35bLystKl0hKX02o2Ccb8vJzsLINep9XwHJBKUYZQs8yXiqaWsNQshdvclWKzdbDJXdkstYRkMSzK+NCUSW1tDCWFZTEkymX4CC9Ah2QfUvZfRelTKH3zlCCI68g6uoUkym83SeJZ2NkZQPhokxQU5QsM3sJgTRmb5OHE5UIOphXVVmyWW\/YNTjSHUEeYzMlulBqj2e5KMpmdg2AOQvIyKT4JyzYAA7hlzWsnOWLIo9uipc3hiOzvDDQ32VyuoLtyk5wvNbEl0shEyrpGWc9EikNUdXJEnKycmrjvrED2hCpyI1IkfGNA5sPIO8E3T0x8QzZVyMulJnn5rR9Z0fKoXCk1NcsVVGr79vl92i9vCbK2VJDEiT8SNEe68MmVmLCK0ZUKfyQUlLlGGbYHXHTYWtDXExMtktgyEZoIn50b3yOJgjQxmZs7EW9GdxN\/AEWcnXvliE1uuS8oC6FBWBtUTW\/Z3i4Xdt4QkLnSFnEwjBj8rZdca2wu0zyN\/8uWCboFnYMedrmoG46c9ZE9OJHHOwPKXCR7bC8Qn6ciKHMhujKVWSnqoSvjmZV59pCEsW3vCkzImtJNEakZPX4kLI\/vwey6iQZGEuT8z20uaaLAJNZ5goxWRK02RYZEWVuGTkKuhQyYN5RlQmCT\/M+VxwUbblBmKhDrJBRD5TRLzSH1d9+gFQWI6Oi2CiURugOyrwkBX1iNWPNktQc5wiEM2FATC6bskeKyWWqYjy5Vq3moK8BYVDbZ3CiTUJ\/KJXuaWV2JzROhJkUFKkvqDLxMvHPTk7Wi7bSX1JJgEyW2NGKWlTVPBCL9sjNki2Dd9YsBm0v2BTHCQSkQDdK0Qw8tn7ax5AiyXOkOtHdJ7Z07A2tURZQFKk5T2nyVGClgU8RgAsqGUoMY4Gx8EAkFRIgtCEgN6\/Au60sNeAnocIaliduwTgyAjWSoUQ15udgcbVLp6PwKoVqaTo1tGWk6OkU5jW02V9ClDHclh8uiujFyGKhT2zJL2KZwwYD52djGUNSXVpr0YkCKSkFpUJR9\/gC1jbqHeVl1BvO5GqvuK2YLnIVuIi5czkyoM+WWCttC58qtbD4\/bbtqeVNmWZwwSO1dE1S4pAokqPkmmdAU9q0x2VgvoAUtYe8VBSxpVtATkz4fLebBtVSItCkyIXUF1jFq7Cd32G6lexWQdmjvbnBXYmtrmJTgcOekDw537Qy8LOC58HB34AUOuMZQQ3ByKa4FXhbxpcGwHMVSJJ2IdEIlbceJgdHbXvYRMs5WNQzB5n1ngTCcIYMD0neWU3CCslEZ28hHOFzRKCu+DLUGcQYFN85wbEwS6jJfttZn8GX5crk8zjYJFPUCYl7Bc2wWkNO5kAe2SeTaztBnYXwyy2dTKMaRwqdoeLjn8tY9OwOnc\/HtbGN33KiBDkwX6yAGG18rzWKEJsrtwcGJUJAWG7FgaPAXZJA2YJikDaiILlfOlqINco7UQPH1FF+v4HUUr8cUBQsg+zjG3i8DzYAbAi4sSXHRP9smhAs0UkFsKhPCr93osXvnPuEvajuImwR9tcWGcgcxlZs8VQ6DecUKbW8QVhSabb1Bq1kz44FpD7zrgSkPzLB7tQdED+zCsTeRSJB6bwWx4s1UQOrqTAWAN68Xf1dWF3qLHeCtWb2qtkq3qna1t6bYJJWXSUt0RWYHXjppSVn5kY1S6YuB+\/56fd+dh+7sWz\/z3lOvbZT6H77nkfV9Bw8d7Fv\/u+nhn\/bA0IuetmN3tu3e6K5as+PgrpMvVaR\/c2rzSGjjjvWVnutvuCv0\/ffKXPSoQ7aiXS\/wb+JJxUJe8X3dpM0hWlJsNeT7gwaBM\/uDnEW0ArHCtBX8Vqi2gmCFGTZ91wpTVpCtcNIKx60wboW4FUJW8FlBYbn+SYbyM1Q1wwpsYSH\/ScapsOF91151JNSxe9fCoayQeurCCtV5JnQdCK4lZcxnFn2t4jILepJ\/Id127v33f\/bvPz1z5z13je3\/+t3j8GHalP797774zz+8\/\/1Xpn\/1j2\/QwxqQCjyxlaAfVsILvjlTrm7xYhdZtsztduXy3pqVVf7gSuMy12JTrrvC7Q86jRVFJTpdVpZ5ezBLKMcDJV+6PcgL+7ywwwurvbDUCxYv6LzwuRc+8sI5L\/yTF0554WEv7PEC+L3Q5IVqRmf2gsYLgzMZwjNeSHnB54VatoxrF73woRemvCAzGXd7IeJVRSg0QobsXS+84YXveOE4I7vZC9d7QczssUbZ4KQXQl7ozuxhZpwfMc4HvTCO2\/sqFqzbGO9HTAFOZgRxtj3uavSCQY1P7675yH1J8PbuvQZB4jL7AiKMr4lgXK3zT6+XQnQocS9mcVd+MPobsGwsxfReAsVFrlXXmWqlJfmc3lJkUqeYE3oVLl\/lgpb2Z3zNY\/Yt7zTNHEj33HdyUXNzfZHpaLrhSE9P4K6j6R3790MhH6pYW1tX0ZD+7ezDJW53CRd4zpCdp1m9MTPtCtpnSyjIiyVu9ulA\/FhPLZhHRWQxOerbWQJgXGQoMhbZHSXEHzSWOEu4XL6kJLegwOIPFgi52s5grmXKAbIDTjrguAPGHRB3QMgBfgcQB2zAh88B1Q4QHSA4YIbRIVHGiZddPF8VpM7q6d29q+Jyc2FOwi5Cu8t1RfmAncSExSKaigBLxVVbBpr1BwdWP1hd\/bc7PnzrX1+HofQjgzE4cSN8UDDxmL8gZ42z6hPQfv5Zun87PPHMqdOP0Zoxz33CuTVfx87R6ivPzs\/XF\/J8sVWTm5PrD2bpc4xmQkydQWJ5knWJeit4rLQNJpTwZoJKtSyoq6mhOmqxiE3SqnrwFnmLJBOtYaoubA313nZHtP4nP7m+em2XdLc5McA94C5\/773u2YMbG4SNVier4W7U58fo+2W0R7v05kV5xEyWr8hz8cXFDn\/QVizwOf6gnreMr4D4CgitAP8KEFfA8yugdwVsWwGZBPyKHg1KG17lLUbdVtV6oIpTWnVRplVbih089+PJ\/97yd9Xule23fP+xYPTGmr87PvAtz4pVic6eLVsf2FkvgeG+4\/aCj+9qevrWWrurqa\/l9mPOt0c8\/qa6rYtqqhp3MHuWY0I9ivaYSafPbdLrITe3yKIzEZNg4vK1Jp4zC0KePygY9bnZ6PLsol4LOC3gs4DSI5mTmSFeL+aDKeNqJRuk8iW6BSVBq4d7tGJtzb01\/y3dgOlfkLXu7XX8m+lRm2W2IZPkYzU3Kv3Shnl+nn8OY\/+Qr5cU5Gk0WQVZxVZtoaUQXWwxavBosT2YJ1hys\/zB3KKTrONPZV4AddML3gmEpcf8u0POvBMUjMhyZr71ZzJ+r5LtXjWTMolUN98SzJg61C5qYTnN+BKghV938vbh+8G7P\/07Q+sr9TO3gANyn3NyH5e4v3i8xN1RXgdmrp8VM0fa0Ma9\/PeIjZSSEV+9yVBaqhFzc0s0PH6WL8le0hm0FplMi7GsTU4TlrXJRAzZFr0GHVBEivxBIoyXQ285+MoBgV2XX1xU8YI6tUZJnap8pqdR7WuUzlWOyWaq3QD1sIp2MCNIq1aDPh9LmRYy\/Ojxb46l04WJyd9vOvno0dbNka4la54Cctc9vcea+mr47935V7OHSty7E2DdfdtGXvNA+EbP2NtS2qHR7h6VnVYaRzL3iYb+JS0fYr45PZeVz+UbhfwsPZ4g\/cEcjVFvgDwDAUtKgIgA3QI0CVArwFIBzAJoBLgowEcCnBPgDQHOCHBKgAcFuFuAr6Cf\/q\/Q1\/1fbnDyWvTVAogCCIz+DSZzXAAujuQhAZSX0d6rRuKqceWx5CsYsJd4d++qV99fC44sWokmZJE+S3lw7s3pO0Lw0kNQALqH4MadZv5WrDrb7H7uCD6LMB83Yz5+rD1KComdjPu2mTU5pKRE0AgOZ6HgDxYWGbEJGIkeE1IvlGACc8WdeHwjTmj1O8HnhGoniE7A+ZQTxhlGAUIMrxqhWrfgFaxm7OXjFlO\/VCeJptoC7Hxl60GtM2AN21QmidyP9z6SPvjTc8Mx3d9AUyr9P9PO8bv37gwm0l+07IRf\/idAsevQRav70sslbnj7te+Wcx+bWM250h28jD2vmLjIIV+nw6gpKCi2ZhdnL5GKC8wF\/qDZlif6g3kWu01v6wxq9AKP71Xe6JNgXAIiQV21BNMSTLF5SALfAhj77nyoaAQTVzQRxcgr+gg7lavNEUvSzElLyi125YgBypkCLX70ZjBwK45uOvPmT97a2687lfbt5yJ3HBzbGrzpCx6byXVLKy\/9j0\/Tlyxty9NWj8fKb536rmsWuwXWXz0a\/az2KWKD1b73CywW3mYrLszW2BdbbCU2f7CkiJgL8RTOFxr1eCTP0YPNDho7XLTDd+1wtx1SdojYocKu4m\/+yA7n7PCGHc7Y4UFGgcvtC3i+w\/A3MB4zw7+VwaOsbjs0ZfBrf8sEnbLD8QVb1dphKaMgduBm7DBth3ftcNIO43aI28FnB9EOgh1kNhUY3RX10XutKvqycyFdufw2Jt75CBXXqXlYKK267oo3sB3o0YGF6JdPPfW3D21pWOleUl1fe+nSW2nNET6wsrzh3enCt28rij\/+RPcXn7vwjI9x8OAh\/peYd4vJlO8OUlhozcnN1Vv1dsfiEn9wsbEQJxYrvmMtRQX0uC\/Q4\/4pB3zkgDccgAcrjQPqcPKgA1IOiDig2wFNDqh1wFIH2NgynvC4hec7PNW964D5o988fqFHevde5asFR2O1oywszIWn4S87+TZt+fu1t96eSN98R2fPzrsOpm\/auxdy+VBl3f3fmD\/W9tpnC+ePtcC+Ebeibywk5FuHX4gWrQW\/EI34XjcIFjNv7gzyFnyJb1j4lTfDvu+UFznin7dCL32Rzwc502GUU9Z8UyzFN7VouvztKypnQH7ryud2pq\/7zQffOHldRVcqffHb3zkxXLd0Ofz+t7PO9KWnPenBcy+6aP8g9HsWe2QO65GdBXq9nRTbix3ORXgOWWTRFRSYzXxn0CwozdLHGiC2xLrjThCcMM16ouyE45nOeO0uqZhxuYVc\/l654hDCPkVZj1jNeqRZvzrTR8rKufT4PdenFnWPTdw+e+Re8Ogij069\/cv3dryzFWbOninKnS0W3tdUWd1pefXxrb\/5ZDb9v8qcrEcG0MYfaDtICVlKbvG1Fi3BpM8jOlJahqBYLKaCxmJnMR5Iiov57OyCZJDkC\/liPp\/F5+dn6\/lFySBf4isDUgbTZXCyDEJlgNNMsbFamz+bqF8S1LqrPifoQZjDN4BaelV4xOJ4ah7Qv2DQrBMK+B\/8+If\/8emdv3roxDcbJFfcfeLbhm+fmnwlvefA8ED83scn4OSPfgUh2Pw+rD0lfXxvgS396\/TMjh\/O\/uKvXzx1oib9TvpDau8yrLhpbRPJJvlku8+TpzGALh94PKIYBYM2n88fC2JJQo5eB1afAISdAE6yl7lPmLeLHbmUolEsKc5YYpJMrlWAcBFI4OJXPDf7LHcs+VL6b7RpEX4N5ekPoPwQ\/+gXiWN8zewu5fzLcu0BfXN\/r3HdHzmn8j\/Cf3nA3nb5P0DpDl0Jdvb5fyAqfHpXupl8bSHmilGgqyNEkyT3agjZinAFf5T4ObpdHTHzdtLNPUuW45oN8W34JHhtxsuF+Hp8ehC\/leJJgPoNxzCZ4czcBP78G7+WP8xf0gxrG7RndJW6Gf2d+nOGFsNrWQZVEzOpoXYx6wTsiXjY537A\/xPh2aoDRuf13TGvO\/obZ6By6Um\/CvN4bh5RYQ3SHFZhLUbxURXWESN5WoX15FbyogobiBk8KpyFZ9NGFc6GUehU4RyymHt9\/j\/mVdyHKpxHVvFZKpxPFvEbqPYa+p++5\/iACgMRNRoV5ki+ZqkK82S1pkaFNUgzqMJaslhzWIV1xKE5pcJ6clHzfRU2kGXal1Q4iyzW\/lyFs7mfaS+pcA5ZY\/h3Fc4lN2blq3AeuSnrJhXOJ7VZ55qGBoZSQ7dGI2IknAqLfbH4gcTQwGBKXNa3XKypXlkttsZiA8NRsTGWiMcS4dRQbLQqu\/FqshpxO4poC6cqxU2jfVUdQ3uiCq3YFU0M9W+PDowNhxMbk33R0Ug0IbrFqymunu+IJpJ0UlNVXV218vLq1cRDSTEsphLhSHQknLhZjPVfqYiYiA4MJVPRBCKHRsWeqq4q0R9ORUdTYng0InbPM27r7x\/qizJkXzSRCiNxLDWIqt40lhhKRob66G7JqnkLFrijKxXdFxW3hFOpaDI22hBO4l6oWffQaCxZKe4fHOobFPeHk2IkmhwaGMXFPQfEK3lEXA2jLaOjsX0ocl+0EvXuT0STg0OjA2KSmqxyi6nBcIoaPRJNJYb6wsPDBzBmI3Hk2oNB2j+UGsSNR6JJcWt0v7g9NhIefbZKUQV9049OFYdG4onYPqajO9mXiEZHcbNwJLxnaHgohdIGw4lwH3oM3TbUl2QeQUeI8fCou3ksEYtHUdOvtXZcJkQFFW8mY8P7cGdKPRqNRuiOqPa+6DAy4cbDsdjN1J7+WAIVjaQG3Qs074+NppA1JoYjETQcvRXrGxuhcUI3pzLKhfsSMVyLD4dTKGUkWTWYSsXXejz79++vCquh6cPIVKFkz1etpQ7Eo2o8ElTKyHAHhn+Uhm6MxZca0bWpQ9wWR\/+0oHKiSlApZlJzZdVKdQt041A8laxKDg1XxRIDnm0tHaSJDJEBvFJ43UqiJEJEvMI4DyPUR2IkTg6QBKMaRKyIXbSPLMdnDakmK\/ESSStSxXB9GPlF0ohwArnoPczkxsgoqcK3VeNflFaD0HZVizbGXYnQJuTvQwkdyLcHVxfKFUkXwwxhn6WcA2QM9QgjZiNJIlcUaSKMQiRuvP6SjL+0voNByfmVGtSrGn+qUPtr8f4lyUMoS2S+TrEVqusI0\/9mxMWQ76s8IiJdlMUviStRNoswqVR2D1J0MSo\/46S+SLHdRhlV9zV23IY79iN\/H4tlhrKPyaY5oUiOITyoevUm9HiCaRBhfBnbkrjzn8fg2tnRxbTbx\/bcwvB0nmRrDThPqnYpPutmWsQQS32xHzWh+w4yOMz8GWHcNMtGVc49mHfiV+4jqrxhNS6jbI99qpaUp1L1dz+7J9m+o7iHyPRTonzl3iLzU5h5XYn0CK6mGG0f4ofx54BaZyPoFWWvPWol7Wd1OahaPMLkimQrPvezrIixuI26lrAYX\/aKkjf9aqaKjDeOcIxZkfGjm8WGWhJlmlIozGp\/D3IMs70V3QZZdoRZbKNqrFPMgoy\/IqqlVOs4w7hJM8sLWvFR1adfw07RcU2JigcX5iaNyTDTN7lA9ijTNjJvo+JtSjWs7qRYPMw60s3z8eln+aZ4NMKkub\/E5\/3MNyl11xjTKII\/SsSV3Ioh7xiLh1JPSjan\/sxzYebfmMoXZ30ppeoywupjkGVgnKzFs6UHtaM\/VSwPF1ZNn1ozVarOnv9jPqpXnHlwYX0k5nUZQR071Oofna+6sQX1m4lEF\/agDtYv4mr+tKieE6+SQKvm6q65kvXLK61QsnEI5ymmT5L5sorZMIDr23CHDnaOZmPOhTpdY0xm+TfugSgBGIQBUoifsiGyFXpJD2wk68GHTx+uNeCzEef0WQXryTjSrUf8BpyvQ\/z12DydeK\/Haxtex\/DS4KVQVCOFB58ede7GeSVyvIN3YBfF1iOWPjfjvA2freqzBfHN+GxW55twjk8SAj39Axi7vw4a32mYnoV3ZkGchYN\/Av+fYPyz459xv59Z7nx+5vUZbtunvZ8+\/ylf\/SkYPwUDuSBc8F8IXYhfOHlBl238BHLJb8H0q+k1zl+sP9\/z8\/U\/6yHn0bLz1ef958fPy+e154Hv+RlvcQpT4lT1VHxqfOrdqempmSnD+GvHX+P+8VWP0\/iq81XOeXrb6YOn+dAzYHzG+Qzn\/1boW9zxJ8D4hPMJzxP8449VOR9rdTgfebjcOf3wzMPc2bmp0w\/nmVpehW3QQdajD7ee5uecz28sgi1olhHvTrw8eG3DK4bXMbzwuwfJnXh5oMO3hu99CHJO2E5UnLjtxJET2vg94\/ccv4cfP3T8EPf8vtf3cUn\/cmdstMI52rrCWeK19ui9fI8Ot8HdfZv2lC5rCfX6nL1IdMPOaufO1uXOQm9BjxYN1iChkXfy9fw2PsYf41\/n9YbtfoezE69p\/4yf8\/mzcluM25zbPNv4s3PTvmi7C6Vtjm8e38xvalnubGtd4zS2Ols9re+0\/qL101Zdbys8ib8tz7e83sL7WpZ7WnwtDlfL4jZbj8Vb1GMCY4\/gNfZwgIH2kh6Pcc7IGY29xoNG3kjqCTduAS2cheOT3V0VFe1n9XPb22WD\/wYZDsulXfTu69wp6w7LpGfnDYFJgPuDh44eJQ32drmmKyCH7MF2OYKAjwLjCAj2SQtpCCaTqQo2oKIC4TG8k4qxCkTuTipYMr9OKpKQxB6VZExQQQmUOeC9gq4hgvIBcu9OEnqjixUKE+VOquIYs3JjgHX3\/wZSQ4PvCmVuZHN0cmVhbQplbmRvYmoKCjYgMCBvYmoKNzA1MgplbmRvYmoKCjcgMCBvYmoKPDwvVHlwZS9Gb250RGVzY3JpcHRvci9Gb250TmFtZS9CQUFBQUErTGliZXJhdGlvblNlcmlmCi9GbGFncyA2Ci9Gb250QkJveFstNTQzIC0zMDMgMTI3OCA5ODJdL0l0YWxpY0FuZ2xlIDAKL0FzY2VudCA4OTEKL0Rlc2NlbnQgLTIxNgovQ2FwSGVpZ2h0IDk4MQovU3RlbVYgODAKL0ZvbnRGaWxlMiA1IDAgUgo+PgplbmRvYmoKCjggMCBvYmoKPDwvTGVuZ3RoIDMxMC9GaWx0ZXIvRmxhdGVEZWNvZGU+PgpzdHJlYW0KeJxdkctugzAQRfd8hZftIsKGhDQSQkqTILHoQ6X9AGIPqaViLEMW\/H09M2krdYF15nHHw3V6aI6Ns3P6Gkbdwix660yAabwGDeIMF+sSlQlj9XyL6NRD55M0attlmmFoXD+WZZK+xdo0h0Xc7c14hvskfQkGgnUXcfdxaGPcXr3\/ggHcLGRSVcJAH+c8df65GyAl1aoxsWznZRUlfw3viweRUax4FT0amHynIXTuAkkpZSXKuq4ScOZfTe1Ycu71Zxdiq4qtUm7yKnJGXNTIOfMRec28Qd4QZxK5IN6ukbfMNOeBOUPeMZN2z3MU8iPnC+QD52nOkfM0\/8R56qmZT5GVZMa7FO9f4F2K98+xX\/H++ZpMuP0t2oHv9WOz0NcQosX0qOQtumod\/L67Hz2q6PsGShaXlQplbmRzdHJlYW0KZW5kb2JqCgo5IDAgb2JqCjw8L1R5cGUvRm9udC9TdWJ0eXBlL1RydWVUeXBlL0Jhc2VGb250L0JBQUFBQStMaWJlcmF0aW9uU2VyaWYKL0ZpcnN0Q2hhciAwCi9MYXN0Q2hhciAxOQovV2lkdGhzWzc3NyA1NTYgNTAwIDc3NyA0NDMgMjUwIDI3NyAzODkgMzMzIDUwMCA0NDMgNTAwIDUwMCA1MDAgMzMzIDUwMAo0NDMgNTAwIDUwMCA1MDAgXQovRm9udERlc2NyaXB0b3IgNyAwIFIKL1RvVW5pY29kZSA4IDAgUgo+PgplbmRvYmoKCjEwIDAgb2JqCjw8L0YxIDkgMCBSCj4+CmVuZG9iagoKMTEgMCBvYmoKPDwvRm9udCAxMCAwIFIKL1Byb2NTZXRbL1BERi9UZXh0XQo+PgplbmRvYmoKCjEgMCBvYmoKPDwvVHlwZS9QYWdlL1BhcmVudCA0IDAgUi9SZXNvdXJjZXMgMTEgMCBSL01lZGlhQm94WzAgMCA2MTIgNzkyXS9Hcm91cDw8L1MvVHJhbnNwYXJlbmN5L0NTL0RldmljZVJHQi9JIHRydWU+Pi9Db250ZW50cyAyIDAgUj4+CmVuZG9iagoKNCAwIG9iago8PC9UeXBlL1BhZ2VzCi9SZXNvdXJjZXMgMTEgMCBSCi9NZWRpYUJveFsgMCAwIDYxMiA3OTIgXQovS2lkc1sgMSAwIFIgXQovQ291bnQgMT4+CmVuZG9iagoKMTIgMCBvYmoKPDwvVHlwZS9DYXRhbG9nL1BhZ2VzIDQgMCBSCi9PcGVuQWN0aW9uWzEgMCBSIC9YWVogbnVsbCBudWxsIDBdCi9MYW5nKGVuLVVTKQo+PgplbmRvYmoKCjEzIDAgb2JqCjw8L0NyZWF0b3I8RkVGRjAwNTcwMDcyMDA2OTAwNzQwMDY1MDA3Mj4KL1Byb2R1Y2VyPEZFRkYwMDRDMDA2OTAwNjIwMDcyMDA2NTAwNEYwMDY2MDA2NjAwNjkwMDYzMDA2NTAwMjAwMDM1MDAyRTAwMzE+Ci9DcmVhdGlvbkRhdGUoRDoyMDE3MDkxMTE0MjkzNCsxMCcwMCcpPj4KZW5kb2JqCgp4cmVmCjAgMTQKMDAwMDAwMDAwMCA2NTUzNSBmIAowMDAwMDA4MzIwIDAwMDAwIG4gCjAwMDAwMDAwMTkgMDAwMDAgbiAKMDAwMDAwMDI0NSAwMDAwMCBuIAowMDAwMDA4NDYzIDAwMDAwIG4gCjAwMDAwMDAyNjUgMDAwMDAgbiAKMDAwMDAwNzQwMiAwMDAwMCBuIAowMDAwMDA3NDIzIDAwMDAwIG4gCjAwMDAwMDc2MTggMDAwMDAgbiAKMDAwMDAwNzk5NyAwMDAwMCBuIAowMDAwMDA4MjMzIDAwMDAwIG4gCjAwMDAwMDgyNjUgMDAwMDAgbiAKMDAwMDAwODU2MiAwMDAwMCBuIAowMDAwMDA4NjU5IDAwMDAwIG4gCnRyYWlsZXIKPDwvU2l6ZSAxNC9Sb290IDEyIDAgUgovSW5mbyAxMyAwIFIKL0lEIFsgPDIyMTQ3RjAwREQ1NjE2MjVCQUQyRUNDRjRGMjYwNERGPgo8MjIxNDdGMDBERDU2MTYyNUJBRDJFQ0NGNEYyNjA0REY+IF0KL0RvY0NoZWNrc3VtIC8yNTAwN0UzOEYwMUNGOTgzMEZFMUY0MzFBQjc4MzIxMwo+PgpzdGFydHhyZWYKODgzNAolJUVPRgo=&quot;,&#xd;
                &quot;fileName&quot;: &quot;test resume encoded base 64.pdf&quot;&#xd;
            }&#xd;
        },&#xd;
        &quot;questions&quot;: {&#xd;
            &quot;questions&quot;: [&#xd;
                {&#xd;
                    &quot;id&quot;: 1,&#xd;
                    &quot;type&quot;: &quot;text&quot;,&#xd;
                    &quot;question&quot;: &quot;&lt;ul&gt;&lt;li&gt;Do you have a CCNA certificate?&lt;\/li&gt;\n&lt;\/ul&gt;&quot;,&#xd;
                    &quot;required&quot;: &quot;true&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;id&quot;: 5,&#xd;
                    &quot;type&quot;: &quot;select&quot;,&#xd;
                    &quot;question&quot;: &quot;&lt;ul&gt;&lt;li&gt;e e e&lt;\/li&gt;\n&lt;\/ul&gt;&quot;,&#xd;
                    &quot;required&quot;: &quot;true&quot;,&#xd;
                    &quot;options&quot;: [&#xd;
                        {&#xd;
                            &quot;value&quot;: 3,&#xd;
                            &quot;label&quot;: &quot;4&quot;&#xd;
                        },&#xd;
                        {&#xd;
                            &quot;value&quot;: 4,&#xd;
                            &quot;label&quot;: &quot;1&quot;&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                {&#xd;
                    &quot;id&quot;: 6,&#xd;
                    &quot;type&quot;: &quot;textarea&quot;,&#xd;
                    &quot;question&quot;: &quot;&lt;ul&gt;&lt;li&gt;Do you have testing skill?&lt;\/li&gt;\n&lt;\/ul&gt;&quot;,&#xd;
                    &quot;required&quot;: &quot;true&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;id&quot;: 10,&#xd;
                    &quot;type&quot;: &quot;text&quot;,&#xd;
                    &quot;question&quot;: &quot;&lt;ul&gt;&lt;li&gt;Test - omar&lt;\/li&gt;\n&lt;\/ul&gt;&quot;,&#xd;
                    &quot;required&quot;: &quot;true&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;id&quot;: 11,&#xd;
                    &quot;type&quot;: &quot;text&quot;,&#xd;
                    &quot;question&quot;: &quot;&lt;p&gt;What is the need for this position?&lt;\/p&gt;\n\n&lt;p&gt;Please explain in 100 words.&lt;\/p&gt;&quot;,&#xd;
                    &quot;required&quot;: &quot;true&quot;&#xd;
                }&#xd;
            ],&#xd;
            &quot;answers&quot;: [&#xd;
                {&#xd;
                    &quot;id&quot;: 1,&#xd;
                    &quot;value&quot;: &quot;Some random text ${indeed_id}&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;id&quot;: 5,&#xd;
                    &quot;value&quot;: 4&#xd;
                },&#xd;
                {&#xd;
                    &quot;id&quot;: 6,&#xd;
                    &quot;value&quot;: &quot;Some random text ${indeed_id}&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;id&quot;: 10,&#xd;
                    &quot;value&quot;: &quot;Some random text ${indeed_id}&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;id&quot;: 11,&#xd;
                    &quot;value&quot;: &quot;Some random text ${indeed_id}&quot;&#xd;
                }&#xd;
            ]&#xd;
        }&#xd;
    }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">robert01.dev.elmodev.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/recruitment/job-advert-submit-application/post/YTozOntzOjc6ImpvYkFkSWQiO2k6NDU7czo2OiJzb3VyY2UiO2k6OTtzOjk6Im9wZXJhdGlvbiI7aTozMDAyO30kNW9SWEdNMndjdWZ6TEoxSCQxZDM5MTk0ZDliYTU2NjljNTk0NGIxYjgwMmEwYzM5OWUxYmU1ZWM5OGYwMDljOTdhNGViZDgzNGM5Mjk2ODEx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Indeed-Signature</stringProp>
                <stringProp name="Header.value">${indeed_tag}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post This Request" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;email&quot;: &quot;peter@klaven&quot;,&#xd;
    &quot;password&quot;: &quot;cityslicka&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">reqres.in/api/login</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>true</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ObsoleteGui" testclass="ResultCollector" testname="Monitor Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>false</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>false</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <url>true</url>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
