<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">false</boolProp>
        <boolProp name="useExpires">false</boolProp>
      </CacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list"/>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies">
          <elementProp name="PHPSESSID" elementType="Cookie" testname="PHPSESSID">
            <stringProp name="Cookie.value">fa9jnn7l0na1c9k5jq6ef11ds0</stringProp>
            <stringProp name="Cookie.domain"></stringProp>
            <stringProp name="Cookie.path"></stringProp>
            <boolProp name="Cookie.secure">true</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
          <elementProp name="_ga" elementType="Cookie" testname="_ga">
            <stringProp name="Cookie.value">GA1.4.1193176677.1543269781</stringProp>
            <stringProp name="Cookie.domain"></stringProp>
            <stringProp name="Cookie.path"></stringProp>
            <boolProp name="Cookie.secure">true</boolProp>
            <longProp name="Cookie.expires">0</longProp>
            <boolProp name="Cookie.path_specified">true</boolProp>
            <boolProp name="Cookie.domain_specified">true</boolProp>
          </elementProp>
        </collectionProp>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1468822077000</longProp>
        <longProp name="ThreadGroup.end_time">1468822077000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Test Data Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="SERVER" elementType="Argument">
              <stringProp name="Argument.name">SERVER</stringProp>
              <stringProp name="Argument.value">tmsfull.elmodev.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="login_username" elementType="Argument">
              <stringProp name="Argument.name">login_username</stringProp>
              <stringProp name="Argument.value">admin.scriptonce</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="login_password" elementType="Argument">
              <stringProp name="Argument.name">login_password</stringProp>
              <stringProp name="Argument.value">Admin1234567</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">/Users/kruthimurthy/Desktop/user_details.txt</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">field_name,visible,editable,profile,reports,enabled</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Open TMS" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">dashboard</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CSRF Token" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">_csrf_token</stringProp>
            <stringProp name="RegexExtractor.regex">name=&quot;_csrf_token&quot; value=&quot;(.+?)&quot; /&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login to TMS" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="_username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${login_username}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_username</stringProp>
              </elementProp>
              <elementProp name="_password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${login_password}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_password</stringProp>
              </elementProp>
              <elementProp name="_csrf_token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${_csrf_token}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_csrf_token</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">login_check</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET User Profile Setup Page" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">controlpanel/my-profile</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">		</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="GET Branding CSRF Token" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">branding_token</stringProp>
            <stringProp name="RegexExtractor.regex">class=&quot;form-control&quot; value=&quot;(.+?)&quot; &gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST User Profile Setup Data" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="data" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;User+Details&quot;:{&quot;startDate&quot;:{&quot;visible&quot;:${visible},&quot;editable&quot;:${editable},&quot;profile&quot;:${profile},&quot;reports&quot;:${reports},&quot;enabled&quot;:${enabled}}}}&amp;subsection=User+Details&amp;userType=user</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">data</stringProp>
              </elementProp>
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${SERVER}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">user/api/config/set?</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">		</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">${__P(bearer)}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="emp_number" elementType="Argument">
              <stringProp name="Argument.name">emp_number</stringProp>
              <stringProp name="Argument.value">JM${__Random(1,100)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;company_number&quot;: &quot;67d0c385-a67f-4439-90fc-3d55b00b06fd&quot;,&#xd;
    &quot;payer_name_business&quot;: &quot;ELMO TEST&quot;,&#xd;
    &quot;employee_number&quot;: &quot;${emp_number}&quot;,&#xd;
    &quot;firstName&quot;: &quot;User&quot;,&#xd;
    &quot;lastName&quot;: &quot;Jmeter_creation&quot;,&#xd;
    &quot;email&quot;: &quot;jackuser@noreply.com&quot;,&#xd;
    &quot;startDate&quot;: &quot;1485907200&quot;,&#xd;
    &quot;dateOfBirth&quot;: &quot;2001-02-02&quot;,&#xd;
    &quot;employmentType&quot;: 1,&#xd;
    &quot;standardHoursPerPay&quot;: 80,&#xd;
    &quot;Annual_RateOfPay&quot;: &quot;114400.00&quot;,&#xd;
    &quot;stateEmployed&quot;: &quot;New South Wales&quot;,&#xd;
    &quot;rate&quot;: 55,&#xd;
    &quot;bsb&quot;: &quot;062000&quot;,&#xd;
    &quot;accountName&quot;: &quot;Primary Account&quot;,&#xd;
    &quot;accountNumber&quot;: &quot;232323232323&quot;,&#xd;
    &quot;type&quot;: 4,&#xd;
    &quot;name&quot;: &quot;Care&quot;,&#xd;
    &quot;membershipNumber&quot;: &quot;23&quot;,&#xd;
    &quot;smsf_abn&quot;: &quot;1200404493723&quot;,&#xd;
    &quot;smsf_bsb&quot;: &quot;062000&quot;,&#xd;
    &quot;smsf_accountNumber&quot;: &quot;323242423&quot;,&#xd;
    &quot;tax_tfn&quot;: &quot;865414088&quot;,&#xd;
    &quot;tax_residency_status&quot;: true,&#xd;
    &quot;tax_claim_tax_free_threshold&quot;: false,&#xd;
    &quot;tax_claim_help_benefit&quot;: true,&#xd;
    &quot;tax_claim_student_loan&quot;: true,&#xd;
    &quot;frequencyName&quot;: &quot;Fortnightly Payroll&quot;,&#xd;
    &quot;overrideAnnualAccrual&quot;: true,&#xd;
    &quot;overrideAnnualDays&quot;: 20,&#xd;
    &quot;overridePersonalAccrual&quot;: true,&#xd;
    &quot;overridePersonalDays&quot;: 10,&#xd;
    &quot;overrideLongServiceAccrual&quot;: false,&#xd;
    &quot;overrideLongServiceDays&quot;: 0,&#xd;
    &quot;public_Holiday_Schedule&quot;: &quot;New South Wales&quot;,&#xd;
    &quot;occupation&quot;: &quot;Accountant&quot;,&#xd;
    &quot;telephone_Home&quot;: &quot;0415266372&quot;,&#xd;
    &quot;telephone_Work&quot;: &quot;&quot;,&#xd;
    &quot;mobile_Number&quot;: &quot;0415444745&quot;,&#xd;
    &quot;address1&quot;: &quot;test&quot;,&#xd;
    &quot;address2&quot;: &quot;test&quot;,&#xd;
    &quot;suburb&quot;: &quot;test&quot;,&#xd;
    &quot;state&quot;: &quot;Australian Capital Territory&quot;,&#xd;
    &quot;postal_Code&quot;: &quot;2232&quot;,&#xd;
    &quot;employeeReportsTo&quot;: &quot;Fred Manager&quot;,&#xd;
    &quot;location&quot;: &quot;Sydney (Head Office)&quot;,&#xd;
    &quot;department&quot;: &quot;Business Development&quot;,&#xd;
    &quot;gender&quot;: &quot;&quot;,&#xd;
    &quot;superEsa&quot;: &quot;232 test&quot;,&#xd;
    &quot;costCentreId&quot;: &quot;14d8b115-9b68-4213-b3af-925c76e331fc&quot;,&#xd;
    &quot;workingHolidayMaker&quot;: true,&#xd;
    &quot;autoPayEachCycle&quot;: true,&#xd;
    &quot;employingEntity&quot;: &quot;c4449002-97f2-4c1d-85b2-c1737c942746&quot;,&#xd;
    &quot;abn&quot;: &quot;&quot;,&#xd;
    &quot;tax_terminated&quot;: false,&#xd;
    &quot;postal_SameAsHome&quot;: false,&#xd;
    &quot;reference&quot;: 279,&#xd;
    &quot;objectState&quot;: 0&#xd;
  }&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">tmsapiuat.elmopayroll.com.au</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/employee/1/67d0c385-a67f-4439-90fc-3d55b00b06fd</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CompareAssertion guiclass="TestBeanGUI" testclass="CompareAssertion" testname="Compare Assertion" enabled="true">
            <boolProp name="compareContent">true</boolProp>
            <longProp name="compareTime">-1</longProp>
            <collectionProp name="stringsToSkip">
              <elementProp name="" elementType="SubstitutionElement">
                <stringProp name="regex">,&quot;Errors&quot;:[],</stringProp>
              </elementProp>
              <elementProp name="" elementType="SubstitutionElement">
                <stringProp name="regex">,&quot;EmployeeUniqueID&quot;:</stringProp>
              </elementProp>
              <elementProp name="" elementType="SubstitutionElement">
                <stringProp name="regex">,&quot;Status&quot;:0,</stringProp>
              </elementProp>
            </collectionProp>
          </CompareAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">emp_guid</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;EmployeeUniqueID&quot;:&quot;(.{36})&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;company_number&quot;: &quot;67d0c385-a67f-4439-90fc-3d55b00b06fd&quot;,&#xd;
    &quot;payer_name_business&quot;: &quot;ELMO TEST&quot;,&#xd;
    &quot;EmployeeUniqueID&quot;:&quot;${emp_guid}&quot;,&#xd;
    &quot;employee_number&quot;: &quot;${emp_number}&quot;,&#xd;
    &quot;firstName&quot;: &quot;testing&quot;,&#xd;
    &quot;lastName&quot;: &quot;New User&quot;,&#xd;
    &quot;email&quot;: &quot;jackuser@noreply.com&quot;,&#xd;
    &quot;startDate&quot;: &quot;1485907200&quot;,&#xd;
    &quot;dateOfBirth&quot;: &quot;2001-02-02&quot;,&#xd;
    &quot;employmentType&quot;: 1,&#xd;
    &quot;standardHoursPerPay&quot;: 80,&#xd;
    &quot;Annual_RateOfPay&quot;: &quot;114400.00&quot;,&#xd;
    &quot;stateEmployed&quot;: &quot;New South Wales&quot;,&#xd;
    &quot;rate&quot;: 55,&#xd;
    &quot;bsb&quot;: &quot;062000&quot;,&#xd;
    &quot;accountName&quot;: &quot;Primary Account&quot;,&#xd;
    &quot;accountNumber&quot;: &quot;232323232323&quot;,&#xd;
    &quot;type&quot;: 4,&#xd;
    &quot;name&quot;: &quot;Care&quot;,&#xd;
    &quot;membershipNumber&quot;: &quot;23&quot;,&#xd;
    &quot;smsf_abn&quot;: &quot;1200404493723&quot;,&#xd;
    &quot;smsf_bsb&quot;: &quot;062000&quot;,&#xd;
    &quot;smsf_accountNumber&quot;: &quot;323242423&quot;,&#xd;
    &quot;tax_tfn&quot;: &quot;865414088&quot;,&#xd;
    &quot;tax_residency_status&quot;: true,&#xd;
    &quot;tax_claim_tax_free_threshold&quot;: false,&#xd;
    &quot;tax_claim_help_benefit&quot;: true,&#xd;
    &quot;tax_claim_student_loan&quot;: true,&#xd;
    &quot;frequencyName&quot;: &quot;Fortnightly Payroll&quot;,&#xd;
    &quot;overrideAnnualAccrual&quot;: true,&#xd;
    &quot;overrideAnnualDays&quot;: 20,&#xd;
    &quot;overridePersonalAccrual&quot;: true,&#xd;
    &quot;overridePersonalDays&quot;: 10,&#xd;
    &quot;overrideLongServiceAccrual&quot;: false,&#xd;
    &quot;overrideLongServiceDays&quot;: 0,&#xd;
    &quot;public_Holiday_Schedule&quot;: &quot;New South Wales&quot;,&#xd;
    &quot;occupation&quot;: &quot;Accountant&quot;,&#xd;
    &quot;telephone_Home&quot;: &quot;0415266372&quot;,&#xd;
    &quot;telephone_Work&quot;: &quot;&quot;,&#xd;
    &quot;mobile_Number&quot;: &quot;0415444745&quot;,&#xd;
    &quot;address1&quot;: &quot;test&quot;,&#xd;
    &quot;address2&quot;: &quot;test&quot;,&#xd;
    &quot;suburb&quot;: &quot;test&quot;,&#xd;
    &quot;state&quot;: &quot;Australian Capital Territory&quot;,&#xd;
    &quot;postal_Code&quot;: &quot;2232&quot;,&#xd;
    &quot;employeeReportsTo&quot;: &quot;Fred Manager&quot;,&#xd;
    &quot;location&quot;: &quot;Sydney (Head Office)&quot;,&#xd;
    &quot;department&quot;: &quot;Business Development&quot;,&#xd;
    &quot;gender&quot;: &quot;&quot;,&#xd;
    &quot;superEsa&quot;: &quot;232 test&quot;,&#xd;
    &quot;costCentreId&quot;: &quot;14d8b115-9b68-4213-b3af-925c76e331fc&quot;,&#xd;
    &quot;workingHolidayMaker&quot;: true,&#xd;
    &quot;autoPayEachCycle&quot;: true,&#xd;
    &quot;employingEntity&quot;: &quot;c4449002-97f2-4c1d-85b2-c1737c942746&quot;,&#xd;
    &quot;abn&quot;: &quot;&quot;,&#xd;
    &quot;tax_terminated&quot;: false,&#xd;
    &quot;postal_SameAsHome&quot;: false,&#xd;
    &quot;reference&quot;: 279,&#xd;
    &quot;objectState&quot;: 1&#xd;
  }&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">tmsapiuat.elmopayroll.com.au</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/employee/1/67d0c385-a67f-4439-90fc-3d55b00b06fd</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CompareAssertion guiclass="TestBeanGUI" testclass="CompareAssertion" testname="Compare Assertion" enabled="true">
            <boolProp name="compareContent">true</boolProp>
            <longProp name="compareTime">-1</longProp>
            <collectionProp name="stringsToSkip">
              <elementProp name="" elementType="SubstitutionElement">
                <stringProp name="regex">,&quot;Errors&quot;:[],</stringProp>
              </elementProp>
            </collectionProp>
          </CompareAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
